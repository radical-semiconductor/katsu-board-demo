syntax = "proto3";

package radical.mcp;

// types of keys that can be burned-in/used

enum KeyType {
  SABER = 0;
  KYBER = 1;
  NTRU = 2;
  DILITHIUM = 3;
  FALCON = 4;
  AES = 5;
}


// a command to connect a device and fetch the device's ID

message ConnectCommand {}

message ConnectResponse {
  bool connected = 1;
  uint32 device_id = 2;
}


// a message containing time and energy usage

message UsageData {
  float cycles = 1;
  float seconds = 2;
  float power_io = 3;     // 3V3 IO power usage
  float power_hci = 4;    // 3V3 HCI and fuse power usage
  float power_main = 5;   // 1V test chip power usage
  float power_core = 6;   // 0.6V VCORE power usage
}


// a command to the development board

message Command {
  oneof command {
    ResetCommand reset = 1;
    DiagnosticCommand diagnostic = 2;
    KeyCommand key = 3;
    KeyInjectCommand inject = 4;
    KyberNTTCommand ntt = 5;
    SaberSBMCommand sbm = 6;
    KeygenCommand keygen = 7;
    EncapsulateCommand encaps = 8;
    DecapsulateCommand decaps = 9;
    SignCommand sign = 10;
    VerifyCommand verify = 11;
    EncryptCommand encrypt = 12;
    DecryptCommand decrypt = 13;
  }
}


// a command to reset the development board

message ResetCommand {}

message ResetResponse {}


// a command to perform a built-in diagnostic

message DiagnosticCommand {
  uint32 diagnostic = 1;  
}

message DiagnosticResponse {
  bool success = 1;
  string error = 2;
  UsageData usage = 3;
}


// a command to load a new key into memory

message KeyCommand {
  bytes key = 1;
  uint32 slot_num = 2;
}

message KeyResponse {
  bool success = 1;
  UsageData usage = 2;
}


// a command to inject a loaded key into memory

message KeyInjectCommand {
  uint32 slot_num = 1;
}

message KeyInjectResponse {
  bool success = 1;
  UsageData usage = 2;
}


// a command to perform an NTT over the Kyber ring

message KyberNTTCommand {
  repeated uint32 poly = 1;
}

message KyberNTTResponse {
  repeated uint32 result = 1;
  UsageData usage = 2;
}


// a command to perform a multiply over the Saber ring

message SaberSBMCommand {
  repeated uint32 poly_a = 1;
  repeated uint32 poly_b = 2;
  bool post_round = 3;
}

message SaberSBMResponse {
  repeated uint32 result = 1;
  UsageData usage = 2;
}


// a command to generate keys for various algorithms

message KeygenCommand {
  KeyType alg = 1;
  uint32 key_slot = 2;
}

message KeygenResponse {
  UsageData usage = 1;
}


// a command to perform key encapsulation

message EncapsulateCommand {
  uint32 pub_key_slot = 1;
  KeyType kem_alg = 2;
}

message EncapsulateResponse {
  bytes encaps_key = 1;
  UsageData usage = 2;
}


// a command to perform key decapsulation

message DecapsulateCommand {
  uint32 priv_key_slot = 1;
  KeyType kem = 2;
  bytes encaps_key = 3;
}

message DecapsulateResponse {
  bytes decaps_key = 1;
  UsageData usage = 2;
}


// a command to perform a digital signature

message SignCommand {
  uint32 priv_key_slot = 1;
  KeyType sig_alg = 2;
  bytes msg = 3;
}

message SignResponse {
  bytes sig = 1;
  UsageData usage = 2;
}


// a command to verify a digital signature

message VerifyCommand {
  uint32 pub_key_slot = 1;
  KeyType sig_alg = 2;
  bytes msg = 3;
  bytes sig = 4;
}

message VerifyResponse {
  bool verified = 1;
  UsageData usage = 2;
}


// a command to perform symmetric encryption 

message EncryptCommand {
  bytes key = 1;
  bytes msg = 2;
}

message EncryptResponse {
  bytes enc_msg = 1;
  UsageData usage = 2;
}


// a command to perform symmetric decryption

message DecryptCommand {
  bytes key = 1;
  bytes enc_msg = 2;
}

message DecryptResponse {
  bytes key = 1;
  bytes dec_msg = 2;
  UsageData usage = 3;
}
