name: Build & Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  KATSU_PROJECT_ROOT: ${{ github.workspace }}

jobs:
  frontend-blazor-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x

    - name: Restore .Net dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Publish Release Build
      run: dotnet publish -c Release -o ${{ github.workspace }}/frontend-blazor-output/

    - name: Zip Frontend Blazor Artifacts
      uses: TheDoctor0/zip-release@0.6.2
      with:
        filename: frontend-blazor.tar.gz
        path: frontend-blazor-output
        directory: ${{ github.workspace }}
        type: tar

    - name: Archive openssl artifacts for linux
      uses: actions/upload-artifact@v3
      with:
        name: frontend-blazor
        path: frontend-blazor.tar.gz

  openssl-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "linux"
            vm-image: "ubuntu-latest"
            liboqs-cmakeargs: "-D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache"
            openssl-buildtarget: "linux-x86_64"
            openssl-configargs: "-lm"
            openssl-make: "make"
            openssl-makeargs: "-j2"
          - platform: "macos"
            vm-image: "macos-latest"
            liboqs-cmakeargs: "-D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache"
            openssl-buildtarget: "darwin64-x86_64-cc"
            openssl-configargs: ""
            openssl-make: "make"
            openssl-makeargs: "-j"
          - platform: "windows"
            vm-image: "windows-latest"
            liboqs-cmakeargs: ""
            openssl-buildtarget: "VC-WIN64A"
            openssl-configargs: ""
            openssl-make: "nmake"
            openssl-makeargs: ""

    runs-on: ${{ matrix.vm-image }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: shogo82148/actions-setup-perl@v1
      if: ${{ matrix.platform == 'windows' }}
    - uses: ilammy/msvc-dev-cmd@v1
      if: ${{ matrix.platform == 'windows' }}
      with:
        arch: win64
    - uses: ilammy/setup-nasm@v1
      if: ${{ matrix.platform == 'windows' }}
      with:
        platform: win64
    - name: Setup build cache
      if: ${{ matrix.platform != 'windows' }}
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}

    - name: Build liboqs
      working-directory: ./liboqs
      run: |
        mkdir build && cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/openssl/oqs" ${{ matrix.liboqs-cmakeargs }} ..
        ninja
        ninja install

    - name: Configure OpenSSl for ${{ matrix.platform }}
      working-directory: ./openssl
      run: |
        perl Configure no-shared ${{ matrix.openssl-buildtarget }} ${{ matrix.openssl-configargs }} --prefix="${{ github.workspace }}/openssl-output"

    - name: Build OpenSSl for ${{ matrix.platform }}
      working-directory: ./openssl
      run: |
        ${{ matrix.openssl-make }} ${{ matrix.openssl-makeargs }}

    - name: Install OpenSSl for ${{ matrix.platform }}
      working-directory: ./openssl
      run: |
        ${{ matrix.openssl-make }} ${{ matrix.openssl-makeargs }} install_sw install_ssldirs

    - name: Zip OpenSSL Artifacts for ${{ matrix.platform }}
      uses: TheDoctor0/zip-release@0.6.2
      with:
        filename: openssl.${{ matrix.openssl-buildtarget }}.tar.gz
        path: openssl-output
        directory: ${{ github.workspace }}
        type: tar

    - name: Archive openssl artifacts for linux
      uses: actions/upload-artifact@v3
      with:
        name: openssl-output-${{ matrix.platform }}
        path: openssl.${{ matrix.openssl-buildtarget }}.tar.gz

  backend-flask:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "linux"
            vm-image: "ubuntu-latest"
          - platform: "macos"
            vm-image: "macos-latest"
          - platform: "windows"
            vm-image: "windows-latest"

    runs-on: ${{ matrix.vm-image }}
    defaults:
      run:
        working-directory: ./pykatsu
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: 'pipenv'
        cache-dependency-path: '**/Pipfile.lock'

    - name: Install pipenv
      run: |
        pip install --user pipx
        pipx install pipenv

    - name: Restore Python dependecies
      run: |
        pipenv install --dev
        pipenv graph

    - name: Test Backend Flask
      run: |
        pipenv run python -m pytest -m'not openssl'

  backend-flask-with-openssl:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "linux"
            vm-image: "ubuntu-latest"
          - platform: "macos"
            vm-image: "macos-latest"
          - platform: "windows"
            vm-image: "windows-latest"

    runs-on: ${{ matrix.vm-image }}
    needs: openssl-build
    defaults:
      run:
        working-directory: ./pykatsu
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: openssl-output-${{ matrix.platform }}

    - name: Extract OpenSSL Artifacts
      uses: a7ul/tar-action@v1.1.0
      id: extract
      with:
        command: x
        cwd: "${{ github.workspace }}"
        files: openssl.${{ matrix.platform }}.tar.gz

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: 'pipenv'
        cache-dependency-path: '**/Pipfile.lock'

    - name: Install pipenv
      run: |
        pip install --user pipx
        pipx install pipenv

    - name: Restore Python dependecies
      run: |
        pipenv install --dev
        pipenv graph

    - name: Test Backend Flask
      run: |
        pipenv run python -m pytest

  end-to-end-test-master:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "linux"
            vm-image: "ubuntu-latest"
          - platform: "macos"
            vm-image: "macos-latest"
          - platform: "windows"
            vm-image: "windows-latest"

    runs-on: ${{ matrix.vm-image }}
    needs: [openssl-build, frontend-blazor-build, backend-flask]
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: openssl-output-${{ matrix.platform }}

    - name: Extract OpenSSL Artifacts
      uses: a7ul/tar-action@v1.1.0
      with:
        command: x
        cwd: "${{ github.workspace }}"
        files: openssl.${{ matrix.platform }}.tar.gz

    - uses: actions/download-artifact@v2
      with:
        name: frontend-blazor.tar.gz

    - name: Extract OpenSSL Artifacts
      uses: a7ul/tar-action@v1.1.0
      with:
        command: x
        cwd: "${{ github.workspace }}"
        files: frontend-blazor.tar.gz

    - name: Test start script
      run: |
        ./start.sh &
        sleep 20
        curl --silent --show-error --location http://localhost:5000/api/timestamp
        curl --silent --show-error --location http://localhost:5000/index.html

  end-to-end-test-releasedbinaries:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "linux"
            vm-image: "ubuntu-latest"
          - platform: "macos"
            vm-image: "macos-latest"
          - platform: "windows"
            vm-image: "windows-latest"

    runs-on: ${{ matrix.vm-image }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: 'pipenv'
        cache-dependency-path: '**/Pipfile.lock'

    - name: Test start script
      run: |
        ./start.sh &
        sleep 35
        curl --silent --show-error --location http://localhost:5000/api/timestamp
        curl --silent --show-error --location http://localhost:5000/index.html
